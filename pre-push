#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"
branch=`git symbolic-ref --short -q HEAD`

showedProject[0]=0
showedProject[1]=0
projectArray[0]="testBundle"
projectArray[1]="developBundle"

function showAlertMessage()
{	
	project="$1"
	if cat git_commit_data.txt | grep "/${project}/" > /dev/null
	then
		if [ ${showedProject[$2]} -eq 0 ] 
		then
			showedProject[$2]=1
			echo "⚠️  ⚠️  ⚠️  you should deploy $project"
		fi
	fi
}

function main()
{
	git log $branch ^origin/$branch | grep 'commit' | sed 's/^commit//g' > git_log_data.txt

	if [ -s "git_log_data.txt" ] 
	then
		cat git_log_data.txt | while read line 
		do
			if [ -n "$line" ]
			then
				echo "$line"
				git show $line > git_commit_data.txt
				if [ -s "git_commit_data.txt" ]
				then
					index=0
					for projectName in ${projectArray[*]}
					do
						showAlertMessage $projectName $index
						let index++
					done	
					: > git_commit_data.txt
				fi		
			fi
		done
	else
		echo "🌲  🌲  🌲  Let it go"
	fi

	rm -rf git_log_data.txt
	rm -rf git_commit_data.txt
}

main
exit 0
